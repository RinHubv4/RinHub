-- Services
local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local TS = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- UI Setup
local gui = Instance.new("ScreenGui")
gui.ResetOnSpawn = false
gui.Name = "RinHubUI"
gui.Parent = playerGui

-- Main Frame
local main = Instance.new("Frame")
main.Size = UDim2.new(0, 200, 0, 230)
main.Position = UDim2.new(0.5, -100, 0.5, -115)
main.BackgroundColor3 = Color3.fromRGB(3, 244, 202)
main.BorderSizePixel = 0
main.Parent = gui

local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 10)
corner.Parent = main

local stroke = Instance.new("UIStroke")
stroke.Color = Color3.fromRGB(9, 255, 182)
stroke.Thickness = 2
stroke.Transparency = 0.3
stroke.Parent = main

-- Background
local bg = Instance.new("Frame")
bg.Size = UDim2.new(1, -10, 1, -40)
bg.Position = UDim2.new(0, 5, 0, 35)
bg.BackgroundColor3 = Color3.fromRGB(9, 255, 182)
bg.BorderSizePixel = 0
bg.Parent = main

local bgCorner = Instance.new("UICorner")
bgCorner.CornerRadius = UDim.new(0, 6)
bgCorner.Parent = bg

-- Title Bar
local titleBar = Instance.new("Frame")
titleBar.Size = UDim2.new(1, 0, 0, 30)
titleBar.BackgroundTransparency = 1
titleBar.Parent = main

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, -60, 1, 0)
title.Position = UDim2.new(0, 10, 0, 0)
title.BackgroundTransparency = 1
title.Text = "Rin Scripts v2.1"
title.TextColor3 = Color3.fromRGB(0, 0, 0)
title.TextSize = 16
title.Font = Enum.Font.GothamBold
title.TextXAlignment = Enum.TextXAlignment.Left
title.Parent = titleBar

-- Minimize Button
local minimizeBtn = Instance.new("TextButton")
minimizeBtn.Size = UDim2.new(0, 25, 0, 25)
minimizeBtn.Position = UDim2.new(1, -55, 0, 2)
minimizeBtn.AnchorPoint = Vector2.new(1, 0)
minimizeBtn.BackgroundColor3 = Color3.fromRGB(3, 244, 202)
minimizeBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
minimizeBtn.Text = "_"
minimizeBtn.Font = Enum.Font.GothamBold
minimizeBtn.TextSize = 18
minimizeBtn.Parent = titleBar

local minCorner = Instance.new("UICorner")
minCorner.CornerRadius = UDim.new(0, 6)
minCorner.Parent = minimizeBtn

-- Exit Button
local exitBtn = Instance.new("TextButton")
exitBtn.Size = UDim2.new(0, 25, 0, 25)
exitBtn.Position = UDim2.new(1, -25, 0, 2)
exitBtn.AnchorPoint = Vector2.new(1, 0)
exitBtn.BackgroundColor3 = Color3.fromRGB(3, 244, 202)
exitBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
exitBtn.Text = "X"
exitBtn.Font = Enum.Font.GothamBold
exitBtn.TextSize = 14
exitBtn.Parent = titleBar

local exitCorner = Instance.new("UICorner")
exitCorner.CornerRadius = UDim.new(0, 6)
exitCorner.Parent = exitBtn

-- Content Frame
local contentFrame = Instance.new("Frame")
contentFrame.Size = UDim2.new(1, -10, 1, -45)
contentFrame.Position = UDim2.new(0, 5, 0, 35)
contentFrame.BackgroundTransparency = 1
contentFrame.Parent = main

-- Status Label (replaces "Add Best Fruit")
local statusLabel = Instance.new("TextLabel")
statusLabel.Size = UDim2.new(0.9, 0, 0, 30)
statusLabel.Position = UDim2.new(0.5, 0, 0, 120)
statusLabel.AnchorPoint = Vector2.new(0.5, 0)
statusLabel.BackgroundTransparency = 1
statusLabel.Text = "Not in trade"
statusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
statusLabel.TextSize = 14
statusLabel.Font = Enum.Font.GothamBold
statusLabel.Parent = contentFrame

-- Toggle Builder
local toggles = {}

local function makeToggle(text, order)
    local base = Instance.new("Frame")
    base.Size = UDim2.new(0.9, 0, 0, 30)
    base.Position = UDim2.new(0.5, 0, 0, (order - 1) * 40)
    base.AnchorPoint = Vector2.new(0.5, 0)
    base.BackgroundColor3 = Color3.fromRGB(3, 244, 202)
    base.BorderSizePixel = 0
    base.Parent = contentFrame

    local baseCorner = Instance.new("UICorner")
    baseCorner.CornerRadius = UDim.new(0, 6)
    baseCorner.Parent = base

    local txt = Instance.new("TextLabel")
    txt.Size = UDim2.new(1, -60, 1, 0)
    txt.Position = UDim2.new(0, 10, 0, 0)
    txt.BackgroundTransparency = 1
    txt.Text = text
    txt.TextColor3 = Color3.fromRGB(0, 0, 0)
    txt.TextSize = 14
    txt.Font = Enum.Font.Gotham
    txt.TextXAlignment = Enum.TextXAlignment.Left
    txt.Parent = base

    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(0, 40, 0, 20)
    btn.Position = UDim2.new(1, -10, 0.5, 0)
    btn.AnchorPoint = Vector2.new(1, 0.5)
    btn.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    btn.Text = ""
    btn.Parent = base

    local btnCorner = Instance.new("UICorner")
    btnCorner.CornerRadius = UDim.new(1, 0)
    btnCorner.Parent = btn

    local dot = Instance.new("Frame")
    dot.Size = UDim2.new(0, 16, 0, 16)
    dot.Position = UDim2.new(0, 2, 0.5, -8)
    dot.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    dot.Parent = btn

    local dotCorner = Instance.new("UICorner")
    dotCorner.CornerRadius = UDim.new(1, 0)
    dotCorner.Parent = dot

    local on = false
    btn.MouseButton1Click:Connect(function()
        if not inTrade then
            return -- can't toggle if not in trade
        end
        on = not on
        TS:Create(btn, TweenInfo.new(0.2), {
            BackgroundColor3 = on and Color3.fromRGB(0, 255, 127) or Color3.fromRGB(0, 0, 0)
        }):Play()
        TS:Create(dot, TweenInfo.new(0.2), {
            Position = on and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
        }):Play()
    end)

    toggles[text] = {button = btn, dot = dot, on = false}
end

-- Create Toggles
makeToggle("Freeze Trade", 1)
makeToggle("Auto Accept", 2)
makeToggle("Auto Add Items", 3)

-- Trade Check Logic
local inTrade = false
local tradingPartner = ""

local function checkTradeStatus()
    local mainGui = playerGui:FindFirstChild("Main")
    if not mainGui then return false, "" end
    
    local tradeFrame = mainGui:FindFirstChild("Trade")
    if not tradeFrame or not tradeFrame.Visible then return false, "" end

    local container = tradeFrame:FindFirstChild("Container")
    if not container then return false, "" end
    
    local frame1 = container:FindFirstChild("1")
    local frame2 = container:FindFirstChild("2")
    if not frame1 or not frame2 then return false, "" end

    local player1Label = frame1:FindFirstChild("TextLabel")
    local player2Label = frame2:FindFirstChild("TextLabel")
    if not player1Label or not player2Label then return false, "" end

    local localName = string.lower(player.Name)
    local displayName = string.lower(player.DisplayName)
    local p1 = string.lower(player1Label.Text)
    local p2 = string.lower(player2Label.Text)

    local partner
    if p1 == localName or p1 == displayName then
        partner = p2
    elseif p2 == localName or p2 == displayName then
        partner = p1
    else
        return false, ""
    end
    
    return true, partner
end

local function updateUI()
    local isInTrade, partner = checkTradeStatus()
    if isInTrade ~= inTrade then
        inTrade = isInTrade
        tradingPartner = partner

        if inTrade then
            statusLabel.Text = "Victim: " .. partner
            statusLabel.TextColor3 = Color3.fromRGB(0, 150, 0)
        else
            statusLabel.Text = "Not in trade"
            statusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
        end
    end
end

RunService.Heartbeat:Connect(updateUI)

-- Minimize Function
local minimized = false
local originalSize = main.Size
local minimizedSize = UDim2.new(0, 200, 0, 30)

minimizeBtn.MouseButton1Click:Connect(function()
    minimized = not minimized
    TS:Create(main, TweenInfo.new(0.3), {
        Size = minimized and minimizedSize or originalSize
    }):Play()
    contentFrame.Visible = not minimized
    bg.Visible = not minimized
end)

-- Exit Function
exitBtn.MouseButton1Click:Connect(function()
    TS:Create(main, TweenInfo.new(0.2), {
        Size = UDim2.new(0, 0, 0, 0),
        Position = UDim2.new(0.5, 0, 0.5, 0)
    }):Play()
    task.wait(0.2)
    gui:Destroy()
end)

-- Dragging Support
local dragging, dragInput, dragStart, startPos
local function update(input)
    local delta = input.Position - dragStart
    main.Position = UDim2.new(
        startPos.X.Scale,
        startPos.X.Offset + delta.X,
        startPos.Y.Scale,
        startPos.Y.Offset + delta.Y
    )
end

titleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = main.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

UIS.InputChanged:Connect(function(input)
    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
        update(input)
    end
end)
